---
title: "Hepc_Bar_analysis"
format: pdf
editor: visual
---

```{r}
library("DEP")
library("dplyr")
library("tidyverse")
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
```

```{r}
data <- read.csv ("proteinGroups.csv", header=TRUE) #this is the csv containing the data after MaxQuant software (Tyanova, Temu, & Cox, 2016), version 1.5.5.1. MS/MS spectra were searched against the Cricetulus griseus Uniprot and trEMBL protein sequence database (downloaded in September 2024) and GPM cRAP sequences (common protein contaminants).
dim (data)
View(data)
```

```{r}
# We filter for contaminant proteins and decoy database hits, which are indicated by "+" in the columns "Potential.contaminants" and "Reverse", respectively.
data_rm <- filter(data, Only.identified.by.site != "+")
dim(data_rm)
#The “LFQ.intensity” columns will be used for subsequent analysis.

```

```{r}
# Are there any duplicated protein.IDs names?
data_rm$Gene.Names %>% duplicated() %>% any()
```

```{r}
View(data_rm)
```

```{r}
# Group by gene name, count duplicates, and show only duplicates
data_rm %>%
  group_by(Gene.Names) %>%
  summarise(frequency = n()) %>%
  arrange(desc(frequency)) %>%
  filter(frequency > 1)
```

```{r}
# Make unique names using the annotation in the "Gene.names" column as primary names and the annotation in "Protein.IDs" as name for those that do not have an gene name.
data_unique <- make_unique(data_rm, "Gene.Names", "Majority.protein.IDs", delim = ";")

# Are there any duplicated names?
data$name %>% duplicated() %>% any()
View(data_unique)

```

```{r}
#filter for the LFQ samples from the data_unique list
filtered_data_LFQ<- data_unique[,132:149]
head(filtered_data_LFQ)

filtered_data_LFQ <- data.frame(data_unique$name, filtered_data_LFQ)

View(filtered_data_LFQ)

#write.csv(filtered_data_LFQ, file = "filtered_data_LFQ.csv", row.names = TRUE)
```

```{r}
colnames(filtered_data_LFQ)
```

```{r}
# Generate a SummarizedExperiment object using an experimental design
LFQ_columns <- grep("LFQ.", colnames(data_unique)) # get LFQ column numbers
experimental_design <- read.csv("experimental_design.csv")
data_se <- make_se(data_unique, LFQ_columns, experimental_design)

# Generate a SummarizedExperiment object using an experimental design
LFQ_columns <- grep("LFQ.", colnames(data_unique)) # get LFQ column numbers
data_se_parsed <- make_se_parse(data_unique, LFQ_columns)

data_se
```

```{r}
# Check for duplicate row names
any(duplicated(rownames(data_unique)))

```

```{r}
#Filter on missing values 
# Plot a barplot of the protein identification overlap between samples
plot_frequency(data_se)
```

```{r}

# Less stringent filtering:
# Filter for proteins that are identified in 2 out of 3 replicates of at least one condition
data_filt <- filter_missval(data_se, thr = 1)
```

```{r}
plot_numbers(data_filt)
```

```{r}
# Plot the first and second principal components
plot_pca(data_filt, x = 1, y = 2, n = 500, point_size = 4)
```

```{r}
# Normalize the data
data_norm <- normalize_vsn(data_filt)
```

```{r}
# Visualize normalization by boxplots for all samples before and after normalization
plot_normalization(data_filt, data_norm)
```

```{r}
# Generate a long data.frame
post_norm <- get_df_wide(data_norm)
View(post_norm)
# Write the wide-format data frame to a CSV file
#write.csv(post_norm, "hepc_post_norm.csv", row.names = FALSE)

```

```{r}
# Plot the first and second principal components
plot_pca(data_norm, x = 1, y = 2, n = 500, point_size = 4)
```

Impute data for missing values

```{r}
# Plot a heatmap of proteins with missing values
plot_missval(data_filt)
```

```{r}
# Plot intensity distributions and cumulative fraction of proteins with and without missing values
plot_detect(data_filt)

```

```{r}
# Impute missing data using random draws from a manually defined left-shifted Gaussian distribution (for MNAR)
data_imp_man <- impute(data_norm, fun = "man", shift = 1.8, scale = 0.3)
```

```{r}
# Plot intensity distributions before and after imputation
plot_imputation(data_norm, data_imp_man)
```

```{r}
# Generate a long data.frame
post_impute <- get_df_wide(data_imp_man)
View(post_impute)
# Write the wide-format data frame to a CSV file
#write.csv(post_impute, "hepc_post_impute.csv", row.names = FALSE)

```

```{r}
# Plot the first and second principal components
plot_pca(data_imp_man, x = 1, y = 2, n = 500, point_size = 4)
```

# plot heatmap of the significant PPI using ggplot after imputations

```{r}
# Load the pheatmap package
library(pheatmap)
library(SummarizedExperiment)  # or the specific package you're using that provides assay()


# Extract the expression data from the 'dep' object
expression_data <- assay(data_imp_man)

# Calculate the Pearson correlation matrix
cor_matrix <- cor(expression_data, method = "pearson")

# Plot the correlation matrix
pheatmap(cor_matrix, 
         color = colorRampPalette(c("blue", "white", "red"))(50), 
         cluster_rows = TRUE, 
         cluster_cols = TRUE, 
         show_rownames = TRUE, 
         show_colnames = TRUE)
```

```{r}
#Heat map of the protein abundance after imputation. 
# Load the pheatmap package
library(pheatmap)

# Extract the expression data from the 'data_imp_man' object
expression_data <- assay(data_imp_man)

# Scale the data (mean-center each protein)
expression_data_scaled <- t(scale(t(expression_data), center = TRUE, scale = FALSE))

# Convert colData(data_imp_man) to a data frame
annotation_col <- as.data.frame(colData(data_imp_man))

# Ensure row names of annotation_col match column names of expression_data
rownames(annotation_col) <- colnames(expression_data_scaled)

# Subset the annotation data
annotation_col <- annotation_col[, c("condition", "replicate")]

# Convert 'condition' to a factor with explicit levels
annotation_col$condition <- factor(annotation_col$condition, 
                                   levels = c("pro_CTRL_1", "pro_CTRL_3", "nonpro_CTRL", "pro_CL1_17", "pro_CL1_21", "nonpro_CL1"))
# Clean 'replicate' levels
annotation_col$replicate <- factor(annotation_col$replicate, levels = c("1", "2", "3"))
annotation_col$replicate <- droplevels(annotation_col$replicate)

# Define colors for all conditions
condition_colors <- c(
  "nonpro_CL1" = "#F8766D",
  "nonpro_CTRL" = "#ABA300", 
   "pro_CL1_17" = "#0CB702", 
  "pro_CL1_21" = "#00BFC4",
  "pro_CTRL_1" = "#00A9FF", 
  "pro_CTRL_3" = "#ED68ED"
)

annotation_colors <- list(
  condition = condition_colors,
  replicate = c("1" = "darkseagreen", "2" = "#0969A2", "3" = "burlywood3")
)


# Plot the heatmap with annotations
pheatmap(
  expression_data_scaled,
  color = colorRampPalette(c("blue", "white", "red"))(50),
  cluster_rows = TRUE,
  cluster_cols = TRUE,
  show_rownames = FALSE,
  show_colnames = TRUE,
  annotation_col = annotation_col,
  annotation_colors = annotation_colors
)
```

#Performed welch's t-test in excel each producer against its parental cell line. Import the file here to R to perform padj using Benjamini-Hochberg.

```{r}
data_ttest <- read.csv("hepc_post_impute_ttest.csv")
View(data_ttest)
```

```{r}
colnames(data_ttest)
```

```{r}
# Adjust p-values for multiple comparisons
data_ttest$adj_pval_b12_17_vs_parent <- p.adjust(data_ttest$welch.pval.b12_17.vs.parent, method = "BH")
data_ttest$adj_pval_b12_21_vs_parent <- p.adjust(data_ttest$welch.pval.b12_21.vs.parent, method = "BH")
data_ttest$adj_pval_wt_1_vs_parent <- p.adjust(data_ttest$welch.pval.wt_1.vs.parent, method = "BH")
data_ttest$adj_pval_wt_3_vs_parent <- p.adjust(data_ttest$welch.pval.wt_3.vs.parent, method = "BH")

```

```{r}
View(data_ttest)
```

```{r}
# Ensure data_ttest is a data frame
data_ttest <- as.data.frame(data_ttest)

# Initialize columns to store p-values and adjusted p-values
data_ttest$welch_pval_wtprovsB12pro <- NA
data_ttest$adj_pval_wtprovsB12pro <- NA

# Loop through each row (gene) to perform Welch's t-test
for (i in 1:nrow(data_ttest)) {
  # Group 1: pro_wt samples (wt_1 and wt_3)
  group1 <- c(data_ttest$pro_wt_1_1[i], data_ttest$pro_wt_1_2[i], data_ttest$pro_wt_1_3[i], 
              data_ttest$pro_wt_3_1[i], data_ttest$pro_wt_3_2[i], data_ttest$pro_wt_3_3[i])
  
  # Group 2: pro_B12 samples (B12_17 and B12_21)
  group2 <- c(data_ttest$pro_B12_17_1[i], data_ttest$pro_B12_17_2[i], data_ttest$pro_B12_17_3[i], 
              data_ttest$pro_B12_21_1[i], data_ttest$pro_B12_21_2[i], data_ttest$pro_B12_21_3[i])
  
  # Perform Welch's t-test for the current gene
  t_test_result <- t.test(group1, group2, var.equal = FALSE)
  
  # Store p-value in the corresponding row
  data_ttest$welch_pval_wtprovsB12pro[i] <- t_test_result$p.value
}

# Adjust p-values using the Benjamini-Hochberg method (BH)
data_ttest$adj_pval_wtprovsB12pro <- p.adjust(data_ttest$welch_pval_wtprovsB12pro, method = "BH")

# View the updated data frame
head(data_ttest)



```

```{r}
#write.csv(data_ttest, "hepc_post_impute_padj_wtprovsb12pro.csv", row.names = FALSE)
```

#Imputed file was exported as excel file, where filtering was done one the sample with filtering criteria: proteins detected in the producer cell line but not in the parental cell line, and proteins showing significant differences between the producer and parental cell lines (fold change \> 0 and adjusted p-value \< 0.05).

#Read the filtered data done in excel in the csv file. 
```{r}
data_padj <- read.csv("hepc_post_impute_padj_wtprovsb12pro.csv")
View(data_padj)
```

```{r}
colnames(data_padj)
```

#perform volcano plots of the producers vs parental cell line using padjusted (< 0.05) and log2FC (> 0). 

#CL1#17 vs parental

```{r}
# Load the necessary libraries
library(ggplot2)
library(ggrepel)
library(dplyr)

# Define your significance thresholds (adjust these values as needed)
significance_threshold <- 0.05
fold_change_threshold <- 0  # Using absolute log2 fold change of 0 

# Create Significant_PPIs column with proper error handling
data_padj <- data_padj %>%
  mutate(Significant_PPIs = case_when(
    adj_pval_b12_17_vs_parent < !!significance_threshold & 
      log2FC_B12_17 > !!fold_change_threshold ~ "Upregulated PPI",
    adj_pval_b12_17_vs_parent < !!significance_threshold & 
      log2FC_B12_17 < -!!fold_change_threshold ~ "Downregulated PPI",
    TRUE ~ "Not Significant PPI"
  ))

# Verify the column was created
head(data_padj$Significant_PPIs)
table(data_padj$Significant_PPIs)

# Now create the volcano plot
volcano_plot_PPIs <- ggplot(data_padj, 
                           aes(x = log2FC_B12_17, 
                               y = -log10(adj_pval_b12_17_vs_parent))) +
  geom_point(aes(color = Significant_PPIs), alpha = 0.7, size = 2) +
  scale_color_manual(values = c("Upregulated PPI" = "red",
                               "Downregulated PPI" = "blue",
                               "Not Significant PPI" = "grey80")) +
  labs(title = "Volcano Plot: Significant PPIs CL1_17 vs Parent",
       x = "Log2 Fold Change",
       y = "-Log10 Adjusted P-value",
       color = "PPI Status") +
  theme_minimal() +
  geom_hline(yintercept = -log10(significance_threshold), 
             linetype = "dashed", color = "black") +
  geom_vline(xintercept = c(-fold_change_threshold, fold_change_threshold), 
             linetype = "dashed", color = "black") +
  geom_text_repel(data = data_padj %>% 
                   filter(Significant_PPIs %in% c("Upregulated PPI", "Downregulated PPI")) %>%
                   arrange(adj_pval_b12_17_vs_parent) %>% 
                   head(5),
                 aes(label = name), 
                 size = 3, 
                 box.padding = 0.5,
                 max.overlaps = Inf)

print(volcano_plot_PPIs)
```


#CL1_21 vs parental

```{r}
# Load the necessary libraries
library(ggplot2)
library(ggrepel)
library(dplyr)

# Define significance thresholds (adjust these values as needed)
significance_threshold <- 0.05
fold_change_threshold <- 0  # Using absolute log2 fold change of 1 as default

# Create Significant_PPIs column for CL1_21 vs Parent comparison
data_padj <- data_padj %>%
  mutate(Significant_PPIs = case_when(
    adj_pval_b12_21_vs_parent < !!significance_threshold & 
      log2FC_B12_21 > !!fold_change_threshold ~ "Upregulated PPI",
    adj_pval_b12_21_vs_parent < !!significance_threshold & 
      log2FC_B12_21 < -!!fold_change_threshold ~ "Downregulated PPI",
    TRUE ~ "Not Significant PPI"
  ))

# Verify the column was created
head(data_padj$Significant_PPIs)
table(data_padj$Significant_PPIs)

# Now create the volcano plot for CL1_21 vs Parent
volcano_plot_PPIs_21 <- ggplot(data_padj, 
                              aes(x = log2FC_B12_21, 
                                  y = -log10(adj_pval_b12_21_vs_parent))) +
  geom_point(aes(color = Significant_PPIs), alpha = 0.7, size = 2) +
  scale_color_manual(values = c("Upregulated PPI" = "red",
                               "Downregulated PPI" = "blue",
                               "Not Significant PPI" = "grey80")) +
  labs(title = "Volcano Plot: Significant PPIs CL1_21 vs Parent",
       x = "Log2 Fold Change",
       y = "-Log10 Adjusted P-value",
       color = "PPI Status") +
  theme_minimal() +
  geom_hline(yintercept = -log10(significance_threshold), 
             linetype = "dashed", color = "black") +
  geom_vline(xintercept = c(-fold_change_threshold, fold_change_threshold), 
             linetype = "dashed", color = "black") +
  geom_text_repel(data = data_padj %>% 
                   filter(Significant_PPIs %in% c("Upregulated PPI", "Downregulated PPI")) %>%
                   arrange(adj_pval_b12_21_vs_parent) %>% 
                   head(5),
                 aes(label = name), 
                 size = 3, 
                 box.padding = 0.5,
                 max.overlaps = Inf)

print(volcano_plot_PPIs_21)
```



# CTRL_1 vs parental cell line

```{r}
# Load the necessary libraries
library(ggplot2)
library(ggrepel)
library(dplyr)

# Define significance thresholds (adjust these values as needed)
significance_threshold <- 0.05
fold_change_threshold <- 0  # Using absolute log2 fold change of 1 as default

# Create Significant_PPIs column for WT_1 vs Parent comparison
data_padj <- data_padj %>%
  mutate(Significant_PPIs = case_when(
    adj_pval_wt_1_vs_parent < !!significance_threshold & 
      log2FC_wt_1 > !!fold_change_threshold ~ "Upregulated PPI",
    adj_pval_wt_1_vs_parent < !!significance_threshold & 
      log2FC_wt_1 < -!!fold_change_threshold ~ "Downregulated PPI",
    TRUE ~ "Not Significant PPI"
  ))

# Verify the column was created
head(data_padj$Significant_PPIs)
table(data_padj$Significant_PPIs)

# Now create the volcano plot for WT_1 vs Parent
volcano_plot_PPIs_wt1 <- ggplot(data_padj, 
                               aes(x = log2FC_wt_1, 
                                   y = -log10(adj_pval_wt_1_vs_parent))) +
  geom_point(aes(color = Significant_PPIs), alpha = 0.7, size = 2) +
  scale_color_manual(values = c("Upregulated PPI" = "red",
                               "Downregulated PPI" = "blue",
                               "Not Significant PPI" = "grey80")) +
  labs(title = "Volcano Plot: Significant PPIs WT_1 vs Parent",
       x = "Log2 Fold Change",
       y = "-Log10 Adjusted P-value",
       color = "PPI Status") +
  theme_minimal() +
  geom_hline(yintercept = -log10(significance_threshold), 
             linetype = "dashed", color = "black") +
  geom_vline(xintercept = c(-fold_change_threshold, fold_change_threshold), 
             linetype = "dashed", color = "black") +
  geom_text_repel(data = data_padj %>% 
                   filter(Significant_PPIs %in% c("Upregulated PPI", "Downregulated PPI")) %>%
                   arrange(adj_pval_wt_1_vs_parent) %>% 
                   head(5),
                 aes(label = name), 
                 size = 3, 
                 box.padding = 0.5,
                 max.overlaps = Inf)

print(volcano_plot_PPIs_wt1)
```



#ctrl_3 vs parental cell line

```{r}
# Load the necessary libraries
library(ggplot2)
library(ggrepel)
library(dplyr)

# Define significance thresholds (adjust these values as needed)
significance_threshold <- 0.05
fold_change_threshold <- 0  # Using absolute log2 fold change of 1 as default

# Create Significant_PPIs column for WT_3 vs Parent comparison
data_padj <- data_padj %>%
  mutate(Significant_PPIs = case_when(
    adj_pval_wt_3_vs_parent < !!significance_threshold & 
      log2FC_wt_3 > !!fold_change_threshold ~ "Upregulated PPI",
    adj_pval_wt_3_vs_parent < !!significance_threshold & 
      log2FC_wt_3 < -!!fold_change_threshold ~ "Downregulated PPI",
    TRUE ~ "Not Significant PPI"
  ))

# Verify the column was created
head(data_padj$Significant_PPIs)
table(data_padj$Significant_PPIs)

# Now create the volcano plot for WT_3 vs Parent
volcano_plot_PPIs_wt3 <- ggplot(data_padj, 
                               aes(x = log2FC_wt_3, 
                                   y = -log10(adj_pval_wt_3_vs_parent))) +
  geom_point(aes(color = Significant_PPIs), alpha = 0.7, size = 2) +
  scale_color_manual(values = c("Upregulated PPI" = "red",
                               "Downregulated PPI" = "blue",
                               "Not Significant PPI" = "grey80")) +
  labs(title = "Volcano Plot: Significant PPIs WT_3 vs Parent",
       x = "Log2 Fold Change",
       y = "-Log10 Adjusted P-value",
       color = "PPI Status") +
  theme_minimal() +
  geom_hline(yintercept = -log10(significance_threshold), 
             linetype = "dashed", color = "black") +
  geom_vline(xintercept = c(-fold_change_threshold, fold_change_threshold), 
             linetype = "dashed", color = "black") +
  geom_text_repel(data = data_padj %>% 
                   filter(Significant_PPIs %in% c("Upregulated PPI", "Downregulated PPI")) %>%
                   arrange(adj_pval_wt_3_vs_parent) %>% 
                   head(5),
                 aes(label = name), 
                 size = 3, 
                 box.padding = 0.5,
                 max.overlaps = Inf)

print(volcano_plot_PPIs_wt3)
```

```{r}

## selected enrichment PPIs imported from excel. Protein enrichment was done in Stringdb focusing on the BP pathway. Graph the enrichment pathways using ggplot2. 

```{r}
selected_PPI <- read.csv("selected_enrichment_PPI.csv")
colnames(selected_PPI)
```

```{r}
# Load necessary libraries
library(ggplot2)


# Basic dot plot with gene count on the x-axis
ggplot(selected_PPI, aes(x = observed.gene.count, 
                         y = reorder(term.description, observed.gene.count))) +
  geom_point(aes(size = observed.gene.count, color = false.discovery.rate)) +
  scale_color_gradient(low = "blue", high = "red") + # Color by FDR
  labs(title = "Pathway Enrichment of PPI in all Producers",
       x = "Observed Gene Count",
       y = "Term Description",
       color = "False Discovery Rate",
       size = "Observed Gene Count") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8)) # Adjust y-axis label size for readability


```
